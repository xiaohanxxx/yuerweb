[uwsgi]
#the local unix socket file than commnuincate to Nginx   用于和 nginx 进行数据交互的端口
socket = 127.0.0.1:8011

# Django项目目录
chdir = /home/myproject

# Django's wsgi file
wsgi-file =yuerweb/wsgi.py

# maximum number of worker processes    # 进程数
processes = 4

#thread numbers startched in each worker process
threads = 2

#一个高阶的cheap模式，在启动的时候只会分配n个工作进程，并使用自适应算法启动新的进程
cheaper = 2

#在经过sec秒的不活跃状态的进程会被销毁(进入了cheap模式)，并最少保留cheaper指定的进程数
idle = 3600

#monitor uwsgi status  通过该端口可以监控 uwsgi 的负载情况
stats = 127.0.0.1:9000

#设置一个请求的超时时间(秒)，如果一个请求超过了这个时间，则请求被丢弃
#harakiri = 60
#当一个请求被harakiri杀掉会，会输出一条日志
#harakiri-verbose = true

# process-related settings
# master
# 表示以主进程模式运行
master = true

# clear environment on exit
# vacuum = true

#保存日志文件，这个路径就是刚刚新建的myuwsgi.log文件的路径
daemonize = /home/myproject/conf/uwsgi.log

# 表示不记录正常信息，只记录错误信息，否则你的日志可能很快就爆满了
disable-logging = true

#在项目生成两个文件uwsgi.status和uwsgi.pid 方便查看pid和运行状态
stats=/home/myproject/conf/uwsgi.status
pidfile=/home/myproject/conf/uwsgi.pid

# 虚拟环境位置
virtualenv = /root/.virtualenv/py3_django


#开启内存使用情况报告
#memory-report = true

#设置平滑的重启（直到处理完接收到的请求）的长等待时间(秒)
#reload-mercy = 10

#设置工作进程使用虚拟内存超过N MB就回收重启
#reload-on-as= 1024

#自动给进程命名
#auto-procname = true

#为进程指定前缀
#procname-prefix-spaced = xc-mms

#设置工作进程每处理N个进程就会被回收重启
#max-requests=500000

#设置工作进程使用物理内存超过N MB就回收重启
#reload-on-rss=100

#设置socket超时时间，默认4秒
#socket-timeout=10

#限制http请求体的大小(Bytes)
limit-post=4096

# clear environment on exit
vacuum = true

#不记录request日志，只记录错误日志
disable-logging = true

#将日志打印到syslog上
#log-syslog = true
